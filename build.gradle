/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

/* Add bnd gradle plugin as a script dependency */
buildscript {
  dependencies {
    classpath bndPlugin
  }
}

def runCommand(String[] args) {
 new ByteArrayOutputStream().withStream { os ->
  def result = exec {
   commandLine = args
   standardOutput = os
  }
  return os.toString().trim()
 }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf)
if (bndWorkspace == null) {
  throw new GradleException("Unable to load workspace ${rootDir}/${bnd_cnf}")
}
ext {
	cnf = rootProject.project(bnd_cnf)
	os = runCommand('uname', '-s')
	arch = runCommand('uname', '-m')
}

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'
  
    tasks.addRule('Pattern: run.<name>: Run the exported <name>.jar file.') { String taskName ->
	  if (taskName.startsWith('run.')) {
		task(taskName) {
			def bndrun = taskName - 'run.'
			def runFile = new File(distsDir, "executable/${bndrun}.jar")
  			description "Run the exported ${bndrun}.jar file."
  			dependsOn "export.${bndrun}"
  			group 'run'
			inputs.file runFile
	  		doLast {
	  			logger.info "Running {} from directory {}", runFile.absolutePath, projectDir.absolutePath
				javaexec {
					main '-jar'
					args runFile
					standardInput System.in
					ignoreExitValue true
					workingDir projectDir
				}
	  		}
	  	}
	  }
	}

	/* run at configuration time. --> lists all possible run tasks when executing 'gradle tasks' */
	fileTree(projectDir) {
		include '*.bndrun'
	}.each {
		tasks.getByPath("run.${it.name - '.bndrun'}")
	}

	/* fix native tests */
    tasks.withType(Test) {
      systemProperty "java.library.path", "${bnd.workspace}/be.iminds.iot.dianne.tensor/generic/${os}/${arch}/"
    }
  }
}