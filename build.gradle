/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.bnd.build.Workspace
import aQute.bnd.osgi.Constants

/* Add bnd gradle plugin as a script dependency */
buildscript {
  dependencies {
    classpath bndPlugin
  }
}

def runCommand(String[] args) {
 new ByteArrayOutputStream().withStream { os ->
  def result = exec {
   commandLine = args
   standardOutput = os
  }
  return os.toString().trim()
 }
}

/* Initialize the bnd workspace */
Workspace.setDriver(Constants.BNDDRIVER_GRADLE)
Workspace.addGestalt(Constants.GESTALT_BATCH, null)
ext.bndWorkspace = new Workspace(rootDir, bnd_cnf)
if (bndWorkspace == null) {
  throw new GradleException("Unable to load workspace ${rootDir}/${bnd_cnf}")
}
ext {
	cnf = rootProject.project(bnd_cnf)
	os = System.env.OS ?: runCommand('uname', '-s').replaceFirst(/^Darwin/, "MacOSX")
	arch = System.env.ARCH ?: runCommand('uname', '-m')
	if (os == "MacOSX") { 
		extension = 'dylib'
	} else {
		extension = 'so'
	}
	lib = System.env.NATIVE ?: "torch"
	println("Configuring workspace with configuration parameters 'OS': $os, 'ARCH': $arch, extension: $extension and 'NATIVE' lib: $lib")
}

/* Configure the subprojects */
subprojects {
  def bndProject = bndWorkspace.getProject(name)
  if (bndProject != null) {
    plugins.apply 'biz.aQute.bnd'

	fileTree(projectDir) {
		include '*.bndrun'
	}.each {
		def bndrun = it.name - '.bndrun'
		task("run.${bndrun}") {
			description "Run the exported ${bndrun}.jar file."
			dependsOn "export.${bndrun}"
			group 'run'
			def executableJar = file("${distsDir}/executable/${bndrun}.jar")
			inputs.file executableJar
			doLast {
				logger.info "Running {} from directory {}", executableJar.absolutePath, projectDir.absolutePath
				javaexec {
					main '-jar'
					args executableJar
					standardInput System.in
					ignoreExitValue true
					workingDir projectDir
				}
			}
		}
	}
	
	task("cleanAll", description: "Clean all code including all (sub)native libraries.", group: 'build') {}
	cleanAll.dependsOn(clean)

	fileTree(projectDir) {
		include 'jni/Makefile'
	}.each { File file ->
		logger.info "Found Makefile in jni folder: {}", file.absolutePath
		task("buildNative", type: Exec, description: "Build native code", group: "build") {
			def outputExtentions = ["*.o","*.dylib","*.so","*.a", "*_*.h"]
			inputs.files compileJava
			inputs.files fileTree(dir: file.parent, excludes: outputExtentions)
			outputs.dir "$projectDir/native/"
			outputs.files fileTree(dir: file.parent, includes: outputExtentions)
			workingDir file.parent
			commandLine "make"
		}
		jar.dependsOn("buildNative")
		
		task("cleanNative", type: Delete, description: "Clean dynamic libraries.", group: 'build') {
			delete "native"
			doLast {
				exec {
					workingDir file.parent
					commandLine "make", "clean"
					standardOutput = new ByteArrayOutputStream()
				}
			}
		}
		clean.dependsOn("cleanNative")
		
		task("cleanAllNative", type: Exec, description: "Clean all native code including sub projects.", group: 'build', dependsOn: "cleanNative") {
			workingDir file.parent
			commandLine "make", "cleanAll"
			standardOutput = new ByteArrayOutputStream()
		}
		cleanAll.dependsOn("cleanAllNative")
	}

	/* fix native tests */
    tasks.withType(Test) {
      systemProperty "java.library.path", "${bnd.workspace}/be.iminds.iot.dianne.tensor.native/native/${lib}/${os}/${arch}/"
    }
  }
}
getTasksByName('test', true).each{ task -> task.dependsOn(getTasksByName('buildNative', true)) }