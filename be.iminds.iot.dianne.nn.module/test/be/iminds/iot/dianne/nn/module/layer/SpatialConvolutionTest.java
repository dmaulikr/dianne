/*******************************************************************************
 * DIANNE  - Framework for distributed artificial neural networks
 * Copyright (C) 2015  iMinds - IBCN - UGent
 *
 * This file is part of DIANNE.
 *
 * DIANNE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contributors:
 *     Tim Verbelen, Steven Bohez, Elias De Coninck
 *******************************************************************************/
package be.iminds.iot.dianne.nn.module.layer;

import java.util.Arrays;
import java.util.Collection;
import java.util.UUID;

import org.junit.Assert;
import org.junit.Assume;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import be.iminds.iot.dianne.api.nn.module.BackwardListener;
import be.iminds.iot.dianne.api.nn.module.ForwardListener;
import be.iminds.iot.dianne.tensor.Tensor;
import be.iminds.iot.dianne.tensor.TensorFactory;
import be.iminds.iot.dianne.tensor.impl.java.JavaTensorFactory;
import be.iminds.iot.dianne.tensor.impl.th.THTensorFactory;

@RunWith(Parameterized.class)
public class SpatialConvolutionTest {
	
	private TensorFactory factory;

	public SpatialConvolutionTest(TensorFactory f, String name) {
		this.factory = f;
	}

	@Parameters(name="{1}")
	public static Collection<Object[]> data() {
		return Arrays.asList(new Object[][] { 
				{ new JavaTensorFactory(), "Java Tensor" },
				{ new THTensorFactory(), "TH Tensor" }
		});
	}
	
	@Test
	public void testSpatialConvolutionConstructor1() {
		int noInputPlanes = 3;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		
		SpatialConvolution conv = new SpatialConvolution(factory, noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, 1 ,1, false);
	
		for(int i=0;i<noOutputPlanes;i++){
			Tensor sub1 = conv.weights.select(0, i);
			for(int j=0;j<noInputPlanes;j++){
				Tensor sub2 = sub1.select(0, j);
				System.out.println("Kernel:");
				sub2.fill(j);
				System.out.println(sub2);
				System.out.println("===");
			}
		}
		
		System.out.println(conv.getParameters());
	}
	
	/**
	 * SpatialConvolution helper method
	 * @throws InterruptedException 
	 */
	private void testSpatialConvolution(int noInputPlanes, int noOutputPlanes, int kernelWidth, int kernelHeight, int stride, int padding, Tensor input, Tensor gradInput, 
			Tensor expGradInput, Tensor output, Tensor gradOutput, Tensor expOutput, Tensor params, float[] expDeltaData) throws InterruptedException {
		try {
			SpatialConvolution conv = new SpatialConvolution(factory, noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, stride, padding > 0);
			conv.zeroDeltaParameters();
			conv.setParameters(params);		
			conv.addForwardListener(new ForwardListener() {
				@Override
				public void onForward(UUID moduleId, Tensor o, String... tags) {
					o.copyInto(output);
					conv.backward(UUID.randomUUID(), gradOutput);
				}
			});
			conv.addBackwardListener(new BackwardListener() {
				@Override
				public void onBackward(UUID moduleId, Tensor gi, String... tags) {
					synchronized(conv) {
						gi.copyInto(gradInput);
						conv.notify();
					}
				}
			});
			synchronized(conv) {
				conv.forward(UUID.randomUUID(), input);
				conv.wait(1000);
				conv.accGradParameters();
			}
			
			Assert.assertEquals(true, expOutput.sameDim(output));
			float[] o = output.get();
			float[] eo = expOutput.get();
			Assert.assertArrayEquals(eo, o, 0.001f);
			for (int i = 0; i < eo.length; i++) {
				Assert.assertEquals(eo[i], o[i], 0.001f);
			}
			
			Assert.assertEquals(true, expGradInput.sameDim(gradInput));
			float[] gi = gradInput.get();
			float[] egi = expGradInput.get();
			Assert.assertArrayEquals(egi, gi, 0.001f);
			for (int i = 0; i < egi.length; i++) {
				Assert.assertEquals(egi[i], gi[i], 0.001f);
			}
			
			//Assert.assertEquals(true, expDelta.sameDim(conv.getDeltaParameters())); // dims are not equal because we use single dimension array for parameters
			float[] d = conv.getDeltaParameters().get();
			Assert.assertArrayEquals(expDeltaData, d, 0.001f);
			for(int i=0;i<expDeltaData.length;i++){
				Assert.assertEquals(expDeltaData[i], d[i], 0.001f);
			}
		} catch (UnsupportedOperationException ex) {
			Assume.assumeNoException("Method not implemented yet for current configuration.", ex);
		}
	}
	
	// test based on randomly generated data with JavaTensor
	@Test
	public void testSpatialConvolution1() throws InterruptedException {
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 1;
		int padding = 0;
		float[] inputData = new float[]{-1.0016336f, -0.3659996f, -0.561763f, 0.025022956f, 0.39551026f, 
				0.25571227f, -0.36720142f, -1.1175866f, 1.6601679f, 0.7697076f, 
				0.94416225f, -0.33390528f, -0.7185745f, -0.82316816f, -0.4198505f, 
				0.8720639f, -0.91903704f, 1.1918385f, 0.9839494f, -1.1864451f, 
				-0.2240562f, 0.1604332f, -1.2869335f, -0.3002753f, 0.70621985f, 

				1.6712323f, 0.427771f, -1.1304947f, 1.5576284f, 0.8286627f, 
				1.1835989f, -1.261588f, 0.109402984f, 0.31725317f, 1.2378355f, 
				0.40925455f, -0.56402963f, -1.0522915f, -0.9422165f, 1.0155184f, 
				-0.31722248f, 1.1515416f, -0.14420497f, -1.6517973f, 0.4656332f, 
				1.050356f, -0.5541778f, -0.21497928f, -0.2700798f, 0.7216463f};
		Tensor input = factory.createTensor(inputData, 2,5,5);
		float[] gradOutputData = new float[]{
				0.014658666f, 0.019304574f, 0.037086185f, 
				0.04770545f, 0.0038461208f, 0.008546961f, 
				0.05205586f, 0.07534614f, 0.08972343f, 

				0.06575316f, 0.07568269f, 0.006832737f, 
				0.038957085f, 0.018131584f, 0.01639061f, 
				0.0061158002f, 0.069639005f, 0.059886318f};
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,3,3);
		float[] paramsData = new float[]{0.06909947f, -0.11323614f, 0.21277206f, -0.12377161f, 0.1685688f, -0.08619809f, -0.019689009f, 0.023438826f, -0.07733278f, -0.19202958f, -0.13959476f, -0.22857352f, -0.07216856f, -0.020798072f, 0.055302367f, -0.18716966f, 0.21065162f, -0.04933682f, -0.22820695f, -0.12155786f, -0.044059023f, -0.009297177f, -0.20280977f, 0.15682052f, -0.21233399f, -0.22110622f, -0.122332945f, -0.22661619f, 0.12204148f, -0.093332455f, -0.11187785f, 0.13372453f, -0.097488046f, 0.18008412f, -0.05052042f, -0.018311232f, 0.097624585f, 0.11113395f};
		Tensor params = factory.createTensor(paramsData, paramsData.length);
		final Tensor output = factory.createTensor(2,3,3);
		final Tensor gradInput = factory.createTensor(2,5,5);
		float[] expOutputData = new float[]{-0.33659852f, -0.335046f, 0.33185792f, 
				-0.16611992f, 0.5136749f, -0.46657073f, 
				-0.2812001f, 0.57139516f, 0.25588644f, 
				
				-0.14429103f, 0.7961464f, 0.5171676f, 
				-0.5985439f, 0.6174212f, -0.2471626f, 
				0.8638994f, 0.53555524f, -0.009491518f};
		Tensor expOutput = factory.createTensor(expOutputData, 2, 3, 3);
		float[] expGradInputData = new float[]{-0.013992422f, -0.025590084f, -0.0101605095f, -0.004257101f, 0.007589861f, 
				-0.008019502f, -0.02796689f, -0.0050563263f, 0.012129665f, -0.001028845f, 
				-0.018315654f, -0.04847254f, -0.043538984f, -0.015240677f, 0.014581912f, 
				-0.015711082f, -0.01385968f, -0.032634832f, 0.0014659166f, -0.0010086568f, 
				-0.0023235206f, -0.016402332f, -0.032887846f, -0.025484096f, -0.014264632f, 

				-0.01771563f, -0.014879633f, -0.011615928f, -0.015819326f, -0.009114635f, 
				-0.02640338f, -0.008124991f, -0.017541144f, -0.007932348f, -0.002098541f, 
				-0.01008603f, -0.025077097f, -0.053949945f, -0.023350062f, -0.029177789f, 
				-0.006354479f, -0.002867078f, -0.004968034f, 0.0039706486f, -0.0015980941f, 
				-0.008641919f, 0.009095047f, 0.003664407f, 0.010882391f, -0.005523261f};
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 5, 5);
		float[] expDelta = new float[]{-0.0818294f, -0.16828917f, -0.17053378f, 0.0759145f, 0.13912615f, 0.0329047f, -0.08604437f, -0.19569962f, -0.017746381f, -0.07223136f, -0.20802501f, 0.026594259f, 0.062725715f, -0.14274885f, -0.08169465f, -0.06221814f, -0.0925414f, 0.028002985f, -0.17292416f, -0.17514737f, -0.12002451f, 0.013043992f, -6.0931593E-4f, 0.012378298f, 0.0014778227f, -0.186651f, -0.054080896f, 0.059774034f, -0.22190878f, 0.06828219f, 0.041177664f, -0.23092169f, -0.08979754f, -0.06185287f, -0.14252709f, -0.13840382f, 0.3482734f, 0.35738897f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDelta);
	}
	
	/**
	 * Convolution test with sample from Torch7
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolution2() throws InterruptedException {
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 1;
		int padding = 0;
		// generated by random Torch7 method
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f, 0.58062905073166f, 0.6516832113266f, 0.52169972658157f, 0.89404588937759f, 0.34193906188011f, 0.96032160520554f, 0.67031198740005f, 0.052529294043779f, 0.69080078601837f, 0.32449850440025f, 0.90962362289429f, 0.54352623224258f, 0.4522956609726f, 0.91364192962646f, 0.71604710817337f, 0.45209869742393f, 0.02264241874218f, 0.9033026099205f, 0.92541521787643f, 0.59716063737869f, 0.053669080138206f, 0.061161655932665f,};
		Tensor input = factory.createTensor(inputData, 2,6,6);
		float[] gradOutputData = new float[]{0.18217983841896f, 0.56863039731979f, 0.25672599673271f, 0.37369287014008f, 0.074035078287125f, 0.62597912549973f, 0.22092123329639f, 0.83397525548935f, 0.57608264684677f, 0.85055124759674f, 0.37656700611115f, 0.38043347001076f, 0.22136156260967f, 0.93729811906815f, 0.77977138757706f, 0.20134671032429f, 0.090761072933674f, 0.49758383631706f, 0.79302996397018f, 0.28194281458855f, 0.10215548425913f, 0.95326918363571f, 0.75291711091995f, 0.14139065146446f, 0.52618819475174f, 0.064794860780239f, 0.69539254903793f, 0.57175064086914f, 0.25679942965508f, 0.11193315684795f, 0.90517032146454f, 0.68695962429047f,};
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,4,4);
		float[] paramsData = new float[]{0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f, -0.055670540779829f, 0.18410444259644f, -0.060332085937262f, -0.016771640628576f, 0.093409061431885f, -0.2105058580637f, -0.18904925882816f, -0.22472660243511f, -0.12965984642506f, -0.099850796163082f, -0.095025263726711f, 0.097043961286545f, -0.14741006493568f, -0.17290295660496f, -0.21699306368828f, 0.15885372459888f, -0.1940380781889f, -0.14195744693279f, 0.07119508087635f, 0.023195665329695f, -0.1455192565918f, 0.19864417612553f,0f,0f};
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end (value 0f)
		final Tensor output = factory.createTensor(2,4,4);
		final Tensor gradInput = factory.createTensor(2,6,6);
		float[] expOutputData = new float[]{-0.51625061035156f, -0.69603663682938f, -0.43361204862595f, -0.40996092557907f, -0.54148775339127f, -0.35664111375809f, -0.43294680118561f, -0.41682583093643f, -0.42606854438782f, -0.50843149423599f, -0.32437819242477f, -0.2619840502739f, -0.57014358043671f, -0.1394467651844f, -0.32168236374855f, -0.24730171263218f, -0.70135605335236f, -0.57496070861816f, -0.83436661958694f, -0.46169105172157f, -0.95917546749115f, -0.8249883055687f, -0.79712682962418f, -0.69667768478394f, -0.84857326745987f, -0.85332459211349f, -0.7032653093338f, -0.50434827804565f, -1.0060906410217f, -0.73142343759537f, -0.66282850503922f, -0.63988143205643f,};
		Tensor expOutput = factory.createTensor(expOutputData, 2, 4, 4);
		float[] expGradInputData = new float[]{0.037928719073534f, 0.1230438798666f, -0.016331739723682f, -0.23671916127205f, -0.23216968774796f, -0.097819000482559f, -0.028817515820265f, -0.077310808002949f, -0.46518459916115f, -0.47478330135345f, -0.31171277165413f, -0.084407545626163f, 0.064123451709747f, -0.47493469715118f, -0.68196219205856f, -0.64230757951736f, -0.67279183864594f, -0.10972543805838f, -0.17681629955769f, -0.4181632399559f, -0.33606708049774f, -0.77300435304642f, -0.81385493278503f, -0.28672111034393f, -0.25289064645767f, -0.46320852637291f, -0.92758548259735f, -0.53240960836411f, -0.23608841001987f, -0.17273873090744f, -0.066213265061378f, -0.20036712288857f, -0.45300710201263f, -0.30609977245331f, -0.21880735456944f, -0.13168942928314f, 0.0061370097100735f, -0.061954192817211f, -0.28949382901192f, -0.17361080646515f, -0.0042611807584763f, 0.017008870840073f, -0.017416600137949f, -0.23205238580704f, -0.68892216682434f, -0.1981825530529f, -0.095924317836761f, -0.040264613926411f, -0.0024746879935265f, -0.18876519799232f, -0.55450707674026f, -0.3687709569931f, -0.11334842443466f, 0.075922176241875f, -0.075561575591564f, -0.010676508769393f, -0.54221129417419f, -0.52757608890533f, -0.1279266923666f, 0.12778499722481f, 0.079354628920555f, -0.00014902651309967f, -0.17561993002892f, -0.46127757430077f, -0.082630977034569f, 0.14489351212978f, 0.046710282564163f, 0.12443264573812f, 0.13901695609093f, -0.11924678087234f, 0.054615244269371f, 0.13308361172676f,};
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 6, 6);
		float[] expDelta = new float[]{4.7351026535034f, 4.9039025306702f, 3.0246305465698f, 4.4790525436401f, 4.6200232505798f, 3.3153631687164f, 4.2057023048401f, 4.1377410888672f, 3.5493760108948f, 4.1740875244141f, 3.6699085235596f, 4.2535133361816f, 4.2317457199097f, 4.2416372299194f, 4.2549643516541f, 4.6223430633545f, 4.6772193908691f, 3.7481489181519f, 4.7226066589355f, 3.7124192714691f, 3.3114366531372f, 4.7847146987915f, 4.1566486358643f, 4.2131977081299f, 4.9735321998596f, 4.0841426849365f, 3.5273320674896f, 4.066198348999f, 4.029203414917f, 4.4005484580994f, 3.7212562561035f, 4.2738833427429f, 3.859384059906f, 4.9755120277405f, 4.1241817474365f, 3.1760032176971f,7.4595523f,7.4320393f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDelta);
	}
	
	/**
	 * Stride test with no overlapping kernels. Sample from Torch7.
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolutionStride1() throws InterruptedException {
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 3;
		int padding = 0;
		// generated by random Torch7 method
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f, 0.58062905073166f, 0.6516832113266f, 0.52169972658157f, 0.89404588937759f, 0.34193906188011f, 0.96032160520554f, 0.67031198740005f, 0.052529294043779f, 0.69080078601837f, 0.32449850440025f, 0.90962362289429f, 0.54352623224258f, 0.4522956609726f, 0.91364192962646f, 0.71604710817337f, 0.45209869742393f, 0.02264241874218f, 0.9033026099205f, 0.92541521787643f, 0.59716063737869f, 0.053669080138206f, 0.061161655932665f,};
		Tensor input = factory.createTensor(inputData, 2,6,6);
		float[] gradOutputData = new float[]{0.18217983841896f, 0.56863039731979f, 0.25672599673271f, 0.37369287014008f, 0.074035078287125f, 0.62597912549973f, 0.22092123329639f, 0.83397525548935f, };
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,2,2);
		float[] paramsData = new float[]{0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f, -0.055670540779829f, 0.18410444259644f, -0.060332085937262f, -0.016771640628576f, 0.093409061431885f, -0.2105058580637f, -0.18904925882816f, -0.22472660243511f, -0.12965984642506f, -0.099850796163082f, -0.095025263726711f, 0.097043961286545f, -0.14741006493568f, -0.17290295660496f, -0.21699306368828f, 0.15885372459888f, -0.1940380781889f, -0.14195744693279f, 0.07119508087635f, 0.023195665329695f, -0.1455192565918f, 0.19864417612553f,0f,0f};
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end
		final Tensor output = factory.createTensor(2,2,2);
		final Tensor gradInput = factory.createTensor(2,6,6);
		float[] expOutputData = new float[]{-0.51625061035156f, -0.40996092557907f, -0.57014358043671f, -0.24730171263218f, -0.70135605335236f, -0.46169105172157f, -1.0060906410217f, -0.63988143205643f, };
		Tensor expOutput = factory.createTensor(expOutputData, 2, 2, 2);
		float[] expGradInputData = new float[]{0.036366358399391f, -0.011837630532682f, -0.035699307918549f, 0.15039572119713f, -0.12007633596659f, -0.18608164787292f, -0.046569339931011f, -0.040154173970222f, 0.026648413389921f, -0.23409870266914f, -0.17653378844261f, 0.04374586045742f, -0.041445381939411f, -0.023771822452545f, -0.038441959768534f, -0.166886895895f, -0.03587568923831f, -0.17819902300835f, 0.062137834727764f, -0.041224714368582f, -0.072348684072495f, 0.13831126689911f, -0.16787032783031f, -0.20218032598495f, -0.091826312243938f, -0.071702130138874f, 0.025910899043083f, -0.24881321191788f, -0.1708080470562f, -0.013447403907776f, -0.069483578205109f, -0.022184491157532f, -0.071358822286129f, -0.14983193576336f, 0.017433375120163f, -0.17940354347229f, 0.009028984233737f, -0.040427710860968f, -0.0017817551270127f, -0.04009697586298f, -0.21187514066696f, 0.057169459760189f, -0.0053794551640749f, -0.039293792098761f, -0.0048711164854467f, -0.093415625393391f, -0.17870458960533f, 0.012910671532154f, 0.035257410258055f, -0.021764818578959f, 0.011651182547212f, 0.11920738965273f, -0.12539868056774f, 0.11481024324894f, -0.0074355062097311f, -0.082269921898842f, 0.016010202467442f, -0.099418699741364f, -0.23094017803669f, 0.10470127314329f, -0.03020391240716f, -0.071923486888409f, 0.0014364300295711f, -0.14339025318623f, -0.17743153870106f, 0.038571253418922f, 0.052388813346624f, -0.047637108713388f, 0.039579000324011f, 0.08814313262701f, -0.14390513300896f, 0.15939688682556f, };
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 6, 6);
		float[] expDeltaData = new float[]{0.51370239257812f, 0.6406124830246f, 0.52672547101974f, 0.70696943998337f, 0.85771149396896f, 0.64942395687103f, 0.65552264451981f, 0.81719851493835f, 0.45751973986626f, 0.74577784538269f, 1.0086688995361f, 1.0131392478943f, 0.97063481807709f, 0.59787356853485f, 0.58924716711044f, 0.66241145133972f, 0.59691977500916f, 0.87459444999695f, 0.55688732862473f, 0.68118631839752f, 0.61974096298218f, 0.86605310440063f, 1.0127917528152f, 0.96329307556152f, 0.69057369232178f, 1.1222015619278f, 0.33123615384102f, 0.7612441778183f, 1.3346670866013f, 1.0874623060226f, 1.3217095136642f, 0.82465976476669f, 0.77445101737976f, 0.93651169538498f, 0.59052234888077f, 0.85809218883514f, 1.3812292f,1.7549107f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDeltaData);
	}
	
	/**
	 * Stride test with a offset stride (not all columns are used). Sample from Torch7.
	 * @throws InterruptedException
	 * 
	 *  // TODO check for wrong data.
	 */
	@Test
	@Ignore
	public void testSpatialConvolutionStride2() throws InterruptedException {
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 2;
		int padding = 0;
		// generated by random Torch7 method
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f, 0.58062905073166f, 0.6516832113266f, 0.52169972658157f, 0.89404588937759f, 0.34193906188011f, 0.96032160520554f, 0.67031198740005f, 0.052529294043779f, 0.69080078601837f, 0.32449850440025f, 0.90962362289429f, 0.54352623224258f, 0.4522956609726f, 0.91364192962646f, 0.71604710817337f, 0.45209869742393f, 0.02264241874218f, 0.9033026099205f, 0.92541521787643f, 0.59716063737869f, 0.053669080138206f, 0.061161655932665f,};
		float[] gradOutputData = new float[]{0.18217983841896f, 0.56863039731979f, 0.25672599673271f, 0.37369287014008f, 0.074035078287125f, 0.62597912549973f, 0.22092123329639f, 0.83397525548935f, };
		float[] paramsData = new float[]{0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f, -0.055670540779829f, 0.18410444259644f, -0.060332085937262f, -0.016771640628576f, 0.093409061431885f, -0.2105058580637f, -0.18904925882816f, -0.22472660243511f, -0.12965984642506f, -0.099850796163082f, -0.095025263726711f, 0.097043961286545f, -0.14741006493568f, -0.17290295660496f, -0.21699306368828f, 0.15885372459888f, -0.1940380781889f, -0.14195744693279f, 0.07119508087635f, 0.023195665329695f, -0.1455192565918f, 0.19864417612553f,0f,0f};
		final Tensor output = factory.createTensor(2,2,2);
		final Tensor gradInput = factory.createTensor(2,6,6);
		float[] expOutputData = new float[]{-0.51625061035156f, -0.43361204862595f, -0.42606854438782f, -0.32437819242477f, -0.70135605335236f, -0.83436661958694f, -0.84857326745987f, -0.7032653093338f, };
		float[] expGradInputData = new float[]{0.036366358399391f, -0.011837630532682f, 0.11469641327858f, -0.12007633596659f, -0.18608164787292f, 0f, -0.046569339931011f, -0.040154173970222f, -0.20745028555393f, -0.17653378844261f, 0.04374586045742f, 0f, 0.020692452788353f, -0.064996540546417f, -0.13936626911163f, -0.20374602079391f, -0.3803793489933f, 0f, -0.091826312243938f, -0.071702130138874f, -0.22290231287479f, -0.1708080470562f, -0.013447403907776f, 0f, -0.069483578205109f, -0.022184491157532f, -0.22119075059891f, 0.017433375120163f, -0.17940354347229f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0.009028984233737f, -0.040427710860968f, -0.04187873005867f, -0.21187514066696f, 0.057169459760189f, 0f, -0.0053794551640749f, -0.039293792098761f, -0.098286740481853f, -0.17870458960533f, 0.012910671532154f, 0f, 0.027821904048324f, -0.10403473675251f, 0.047450073063374f, -0.35633885860443f, 0.21951150894165f, 0f, -0.03020391240716f, -0.071923486888409f, -0.14195382595062f, -0.17743153870106f, 0.038571253418922f, 0f, 0.052388813346624f, -0.047637108713388f, 0.12772212922573f, -0.14390513300896f, 0.15939688682556f, 0f, 0f, 0f, 0f, 0f, 0f, 0f,};
		float[] expDeltaData = new float[]{0.9115948677063f, 0.77618479728699f, 0.74876588582993f, 1.0462682247162f, 0.49544331431389f, 1.0071537494659f, 1.1017978191376f, 0.86404156684875f, 0.75870710611343f, 0.9488582611084f, 0.87445682287216f, 1.0139126777649f, 0.61683052778244f, 0.69897854328156f, 0.5271008014679f, 0.79558396339417f, 0.89983409643173f, 0.78613102436066f, 1.2830642461777f, 1.0255702733994f, 0.95199000835419f, 1.3894003629684f, 0.54246360063553f, 1.0765328407288f, 1.2659888267517f, 1.0651597976685f, 0.83561724424362f, 1.2077804803848f, 1.2132768630981f, 1.1771831512451f, 0.86441713571548f, 0.62984812259674f, 0.79346007108688f, 0.96717250347137f, 1.3096032142639f, 1.0666472911835f,};
		Tensor input = factory.createTensor(inputData, 2,6,6);
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,2,2);
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end
		Tensor expOutput = factory.createTensor(expOutputData, 2, 2, 2);
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 6, 6);
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDeltaData);
	}
	
	/**
	 * Padding test with sample from Torch7
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolutionPadding1() throws InterruptedException{
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 1;
		int padding = 1;
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f, 0.58062905073166f, 0.6516832113266f, 0.52169972658157f, 0.89404588937759f, 0.34193906188011f, 0.96032160520554f, 0.67031198740005f, 0.052529294043779f, 0.69080078601837f, 0.32449850440025f, 0.90962362289429f, 0.54352623224258f, 0.4522956609726f, 0.91364192962646f, 0.71604710817337f, 0.45209869742393f, 0.02264241874218f, 0.9033026099205f, 0.92541521787643f, 0.59716063737869f, 0.053669080138206f, 0.061161655932665f,};
		Tensor input = factory.createTensor(inputData, 2,6,6);
		float[] gradOutputData = new float[]{0.18217983841896f, 0.56863039731979f, 0.25672599673271f, 0.37369287014008f, 0.074035078287125f, 0.62597912549973f, 0.22092123329639f, 0.83397525548935f, 0.57608264684677f, 0.85055124759674f, 0.37656700611115f, 0.38043347001076f, 0.22136156260967f, 0.93729811906815f, 0.77977138757706f, 0.20134671032429f, 0.090761072933674f, 0.49758383631706f, 0.79302996397018f, 0.28194281458855f, 0.10215548425913f, 0.95326918363571f, 0.75291711091995f, 0.14139065146446f, 0.52618819475174f, 0.064794860780239f, 0.69539254903793f, 0.57175064086914f, 0.25679942965508f, 0.11193315684795f, 0.90517032146454f, 0.68695962429047f, 0.54472261667252f, 0.62434142827988f, 0.88028728961945f, 0.60537958145142f, 0.098663091659546f, 0.82459199428558f, 0.47921741008759f, 0.57200008630753f, 0.11126954108477f, 0.15555231273174f, 0.88959872722626f, 0.56573754549026f, 0.7768982052803f, 0.19175456464291f, 0.33983808755875f, 0.55525487661362f, 0.54941540956497f, 0.048377394676208f, 0.34657621383667f, 0.9941828250885f, 0.49282470345497f, 0.52245903015137f, 0.45057979226112f, 0.4008449614048f, 0.17168821394444f, 0.15398475527763f, 0.10541539639235f, 0.46991533041f, 0.73924225568771f, 0.61233860254288f, 0.049723282456398f, 0.044275473803282f, 0.61087107658386f, 0.026207147166133f, 0.6654931306839f, 0.61153095960617f, 0.12331616133451f, 0.46588557958603f, 0.40230292081833f, 0.80102115869522f, };
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,6,6);
		float[] paramsData = new float[]{0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f, -0.055670540779829f, 0.18410444259644f, -0.060332085937262f, -0.016771640628576f, 0.093409061431885f, -0.2105058580637f, -0.18904925882816f, -0.22472660243511f, -0.12965984642506f, -0.099850796163082f, -0.095025263726711f, 0.097043961286545f, -0.14741006493568f, -0.17290295660496f, -0.21699306368828f, 0.15885372459888f, -0.1940380781889f, -0.14195744693279f, 0.07119508087635f, 0.023195665329695f, -0.1455192565918f, 0.19864417612553f,0f,0f};
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end
		final Tensor output = factory.createTensor(2,6,6);
		final Tensor gradInput = factory.createTensor(2,6,6);
		float[] expOutputData = new float[]{-0.26249188184738f, -0.44287446141243f, -0.48384723067284f, -0.51510447263718f, -0.36361765861511f, -0.4026974439621f, -0.59626287221909f, -0.51625061035156f, -0.69603663682938f, -0.43361204862595f, -0.40996092557907f, -0.2793380022049f, -0.49833795428276f, -0.54148775339127f, -0.35664111375809f, -0.43294680118561f, -0.41682583093643f, -0.12524992227554f, -0.49448877573013f, -0.42606854438782f, -0.50843149423599f, -0.32437819242477f, -0.2619840502739f, -0.19889542460442f, -0.50967425107956f, -0.57014358043671f, -0.1394467651844f, -0.32168236374855f, -0.24730171263218f, -0.29474222660065f, -0.21065056324005f, 0.019872382283211f, -0.34766912460327f, -0.15422795712948f, -0.17223820090294f, -0.035516832023859f, -0.13821041584015f, -0.48082530498505f, -0.27410736680031f, -0.68174701929092f, -0.22866386175156f, -0.55183851718903f, -0.54696816205978f, -0.70135605335236f, -0.57496070861816f, -0.83436661958694f, -0.46169105172157f, -0.82106447219849f, -0.34644913673401f, -0.95917546749115f, -0.8249883055687f, -0.79712682962418f, -0.69667768478394f, -0.43034201860428f, -0.46814060211182f, -0.84857326745987f, -0.85332459211349f, -0.7032653093338f, -0.50434827804565f, -0.53590172529221f, -0.2896112203598f, -1.0060906410217f, -0.73142343759537f, -0.66282850503922f, -0.63988143205643f, -0.71853548288345f, -0.35047426819801f, -0.50040858983994f, -0.67262709140778f, -0.86250203847885f, -0.69474285840988f, -0.57213681936264f, };
		Tensor expOutput = factory.createTensor(expOutputData, 2, 6, 6);
		float[] expGradInputData = new float[]{-0.31713771820068f, -0.45870488882065f, -0.47380495071411f, -0.31964194774628f, -0.23994022607803f, -0.34059923887253f, -0.57875740528107f, -0.64542651176453f, -0.66268700361252f, -0.72051465511322f, -0.61487901210785f, -0.42195868492126f, -0.43123829364777f, -1.0426194667816f, -0.64761638641357f, -0.53402435779572f, -0.73497539758682f, -0.50683796405792f, -0.57088077068329f, -0.71361219882965f, -0.62117576599121f, -0.48714518547058f, -0.57348680496216f, -0.22398647665977f, -0.46802416443825f, -0.67071974277496f, -0.64082819223404f, -0.48969569802284f, -0.4563002884388f, -0.48000717163086f, -0.57649230957031f, -0.48517054319382f, -0.57291781902313f, -0.62250393629074f, -0.51004296541214f, -0.226408213377f, -0.39521008729935f, -0.46503201127052f, -0.32307842373848f, -0.22675427794456f, -0.21416431665421f, -0.2625538110733f, -0.17623624205589f, -0.39425623416901f, -0.44084674119949f, -0.50431799888611f, -0.031686887145042f, -0.28361096978188f, -0.29158997535706f, -0.12200802564621f, -0.21308992803097f, -0.20939512550831f, -0.30125811696053f, -0.32541084289551f, -0.50164270401001f, 0.063148699700832f, -0.0044603571295738f, -0.42687654495239f, -0.23307347297668f, -0.075836852192879f, -0.64478099346161f, -0.16770453751087f, 0.10622680187225f, -0.31369444727898f, -0.40814533829689f, -0.31711229681969f, -0.43544921278954f, -0.021236822009087f, 0.019770167768002f, -0.20224303007126f, -0.40731513500214f, -0.12325123697519f, };
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 6, 6);
		float[] expDeltaData = new float[]{8.0002975463867f, 8.7104473114014f, 6.7001705169678f, 8.212061882019f, 8.4812316894531f, 7.9505968093872f, 7.3454704284668f, 7.5361914634705f, 6.3615293502808f, 8.1555662155151f, 9.1059684753418f, 8.2046279907227f, 7.3014993667603f, 8.8166255950928f, 8.6528825759888f, 6.5296864509583f, 8.0428371429443f, 5.9260730743408f, 5.7693204879761f, 7.1666588783264f, 6.05042552948f, 7.3710856437683f, 7.7735857963562f, 6.4614591598511f, 5.5437288284302f, 6.4912786483765f, 5.6303963661194f, 4.9105272293091f, 7.7875671386719f, 6.0367660522461f, 6.5075058937073f, 8.1746234893799f, 7.8515892028809f, 4.978241443634f, 5.780068397522f, 5.6004786491394f, 17.546322f,15.418848f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDeltaData);
	}
	
	/**
	 * Sparse Padding test with sample from Torch7
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolutionPadding2() throws InterruptedException{
//		int noInputPlanes = 2;
//		int noOutputPlanes = 2;
//		int kernelWidth = 3;
//		int kernelHeight = 3;
//		int stride = 1;
//		int padding = 5;
		Assume.assumeTrue("Test not implemented yet: custom padding not supported yet.", false);
	}
	
	/**
	 * Convolution bias test with sample from Torch7
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolutionAddBias() throws InterruptedException{
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 1;
		int padding = 0;
		// generated by random Torch7 method
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f, 0.58062905073166f, 0.6516832113266f, 0.52169972658157f, 0.89404588937759f, 0.34193906188011f, 0.96032160520554f, 0.67031198740005f, 0.052529294043779f, 0.69080078601837f, 0.32449850440025f, 0.90962362289429f, 0.54352623224258f, 0.4522956609726f, 0.91364192962646f, 0.71604710817337f, 0.45209869742393f, 0.02264241874218f, 0.9033026099205f, 0.92541521787643f, 0.59716063737869f, 0.053669080138206f, 0.061161655932665f,};
		Tensor input = factory.createTensor(inputData, 2,6,6);
		float[] gradOutputData = new float[]{0.18217983841896f, 0.56863039731979f, 0.25672599673271f, 0.37369287014008f, 0.074035078287125f, 0.62597912549973f, 0.22092123329639f, 0.83397525548935f, 0.57608264684677f, 0.85055124759674f, 0.37656700611115f, 0.38043347001076f, 0.22136156260967f, 0.93729811906815f, 0.77977138757706f, 0.20134671032429f, 0.090761072933674f, 0.49758383631706f, 0.79302996397018f, 0.28194281458855f, 0.10215548425913f, 0.95326918363571f, 0.75291711091995f, 0.14139065146446f, 0.52618819475174f, 0.064794860780239f, 0.69539254903793f, 0.57175064086914f, 0.25679942965508f, 0.11193315684795f, 0.90517032146454f, 0.68695962429047f,};
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,4,4);
		float[] paramsData = new float[]{0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f, -0.055670540779829f, 0.18410444259644f, -0.060332085937262f, -0.016771640628576f, 0.093409061431885f, -0.2105058580637f, -0.18904925882816f, -0.22472660243511f, -0.12965984642506f, -0.099850796163082f, -0.095025263726711f, 0.097043961286545f, -0.14741006493568f, -0.17290295660496f, -0.21699306368828f, 0.15885372459888f, -0.1940380781889f, -0.14195744693279f, 0.07119508087635f, 0.023195665329695f, -0.1455192565918f, 0.19864417612553f,2f,2f};
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end (value 2.0f)
		final Tensor output = factory.createTensor(2,4,4);
		final Tensor gradInput = factory.createTensor(2,6,6);
		float[] expOutputData = new float[]{1.4837493896484f, 1.3039634227753f, 1.5663878917694f, 1.5900390148163f, 1.4585123062134f, 1.6433589458466f, 1.5670531988144f, 1.5831742286682f, 1.5739314556122f, 1.4915685653687f, 1.6756217479706f, 1.7380158901215f, 1.4298564195633f, 1.8605532646179f, 1.6783176660538f, 1.752698302269f, 1.2986439466476f, 1.4250392913818f, 1.1656334400177f, 1.5383089780807f, 1.0408245325089f, 1.1750116348267f, 1.2028732299805f, 1.3033223152161f, 1.1514267921448f, 1.1466753482819f, 1.2967346906662f, 1.4956517219543f, 0.99390935897827f, 1.2685766220093f, 1.3371715545654f, 1.3601186275482f, };
		Tensor expOutput = factory.createTensor(expOutputData, 2, 4, 4);
		float[] expGradInputData = new float[]{0.037928719073534f, 0.1230438798666f, -0.016331739723682f, -0.23671916127205f, -0.23216968774796f, -0.097819000482559f, -0.028817515820265f, -0.077310808002949f, -0.46518459916115f, -0.47478330135345f, -0.31171277165413f, -0.084407545626163f, 0.064123451709747f, -0.47493469715118f, -0.68196219205856f, -0.64230757951736f, -0.67279183864594f, -0.10972543805838f, -0.17681629955769f, -0.4181632399559f, -0.33606708049774f, -0.77300435304642f, -0.81385493278503f, -0.28672111034393f, -0.25289064645767f, -0.46320852637291f, -0.92758548259735f, -0.53240960836411f, -0.23608841001987f, -0.17273873090744f, -0.066213265061378f, -0.20036712288857f, -0.45300710201263f, -0.30609977245331f, -0.21880735456944f, -0.13168942928314f, 0.0061370097100735f, -0.061954192817211f, -0.28949382901192f, -0.17361080646515f, -0.0042611807584763f, 0.017008870840073f, -0.017416600137949f, -0.23205238580704f, -0.68892216682434f, -0.1981825530529f, -0.095924317836761f, -0.040264613926411f, -0.0024746879935265f, -0.18876519799232f, -0.55450707674026f, -0.3687709569931f, -0.11334842443466f, 0.075922176241875f, -0.075561575591564f, -0.010676508769393f, -0.54221129417419f, -0.52757608890533f, -0.1279266923666f, 0.12778499722481f, 0.079354628920555f, -0.00014902651309967f, -0.17561993002892f, -0.46127757430077f, -0.082630977034569f, 0.14489351212978f, 0.046710282564163f, 0.12443264573812f, 0.13901695609093f, -0.11924678087234f, 0.054615244269371f, 0.13308361172676f, };
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 6, 6);
		float[] expDeltaData = new float[]{4.7351026535034f, 4.9039025306702f, 3.0246305465698f, 4.4790525436401f, 4.6200232505798f, 3.3153631687164f, 4.2057023048401f, 4.1377410888672f, 3.5493760108948f, 4.1740875244141f, 3.6699085235596f, 4.2535133361816f, 4.2317457199097f, 4.2416372299194f, 4.2549643516541f, 4.6223430633545f, 4.6772193908691f, 3.7481489181519f, 4.7226066589355f, 3.7124192714691f, 3.3114366531372f, 4.7847146987915f, 4.1566486358643f, 4.2131977081299f, 4.9735321998596f, 4.0841426849365f, 3.5273320674896f, 4.066198348999f, 4.029203414917f, 4.4005484580994f, 3.7212562561035f, 4.2738833427429f, 3.859384059906f, 4.9755120277405f, 4.1241817474365f, 3.1760032176971f, 7.4596f, 7.4320f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDeltaData);
	}
	
	/**
	 * Full convolution test (including padding, bias, strides) with sample from Torch7
	 * @throws InterruptedException 
	 */
	@Test
	public void testSpatialConvolutionFull() throws InterruptedException{
		int noInputPlanes = 2;
		int noOutputPlanes = 2;
		int kernelWidth = 3;
		int kernelHeight = 3;
		int stride = 2;
		int padding = 1; // TODO: increase padding if custom padding is supported
		// generated by random Torch7 method
		float[] inputData = new float[]{0.54260140657425f, 0.77509915828705f, 0.44873359799385f, 0.2931903898716f, 0.37099409103394f, 0.16070425510406f, 0.69330382347107f, 0.45398011803627f, 0.76890963315964f, 0.2489660680294f, 0.95212423801422f, 0.085108451545238f, 0.80213135480881f, 0.73964524269104f, 0.94101959466934f, 0.74492788314819f, 0.57392853498459f, 0.094297885894775f, 0.62661677598953f, 0.71633577346802f, 0.86131709814072f, 0.23352226614952f, 0.27976062893867f, 0.35449278354645f, 0.91204154491425f, 0.39246296882629f, 0.49888157844543f, 0.54844242334366f, 0.35548770427704f, 0.89076638221741f, 0.075583055615425f, 0.24581550061703f, 0.89840531349182f, 0.17767989635468f, 0.78403854370117f, 0.0048711099661887f, 0.48096200823784f, 0.066472105681896f, 0.97717976570129f, 0.96854084730148f, 0.86501216888428f, 0.95275855064392f, 0.60699987411499f, 0.81075406074524f, 0.29539740085602f, 0.50139105319977f, 0.075710847973824f, 0.44030290842056f, 0.34513679146767f, 0.26516902446747f,};
		Tensor input = factory.createTensor(inputData, 2,5,5);
		float[] gradOutputData = new float[]{0.37201631069183f, 0.46442198753357f, 0.69815051555634f, 0.053449630737305f, 0.098965957760811f, 0.023282872512937f, 0.22494992613792f, 0.28818446397781f, 0.29842096567154f, 0.70586133003235f, 0.18729603290558f, 0.13321743905544f, 0.039688188582659f, 0.83697962760925f, 0.088383093476295f, 0.1988627910614f, 0.65102756023407f, 0.54920542240143f, };
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,3,3);
		float[] paramsData = new float[]{0.038008894771338f, 0.071504138410091f, 0.010229359380901f, 0.18575502932072f, -0.074510641396046f, 0.21699768304825f, 0.080285854637623f, -0.21093972027302f, 0.08994434773922f, -0.082732200622559f, 0.19309841096401f, 0.020518463104963f, -0.022488042712212f, 0.19499269127846f, 0.10184558480978f, -0.02258088812232f, -0.22502852976322f, 0.19011867046356f, 0.20054265856743f, 0.045801967382431f, -0.21040241420269f, -0.20687037706375f, 0.16165791451931f, 0.020568618550897f, -0.11912970244884f, -0.16429749131203f, -0.16771778464317f, 0.18685314059258f, -0.18888027966022f, -0.16992264986038f, -0.1511058807373f, 0.11982592195272f, -0.13372837007046f, -0.074335902929306f, 0.049325816333294f, -0.15799751877785f,2f,2f};
		Tensor params = factory.createTensor(paramsData, paramsData.length); // with bias data of 2 items at the end (value 2.0f)
		final Tensor output = factory.createTensor(2,3,3);
		final Tensor gradInput = factory.createTensor(2,5,5);
		float[] expOutputData = new float[]{2.3132870197296f, 2.1612148284912f, 2.0212898254395f, 1.9166519641876f, 2.5202593803406f, 2.2323091030121f, 2.3376927375793f, 2.3087501525879f, 2.1068398952484f, 1.9061784744263f, 1.5728497505188f, 1.9453032016754f, 1.570862531662f, 1.4180482625961f, 1.7801859378815f, 1.7820811271667f, 1.9125574827194f, 2.3078968524933f, };
		Tensor expOutput = factory.createTensor(expOutputData, 2, 3, 3);
		float[] expGradInputData = new float[]{0.086388900876045f, 0.14276799559593f, -0.0043264962732792f, 0.20675714313984f, -0.030483990907669f, -0.18880459666252f, 0.093857236206532f, -0.083325527608395f, -0.10593992471695f, -0.16344201564789f, 0.0024333433248103f, -0.14234808087349f, 0.12793035805225f, 0.024731965735555f, 0.012553004547954f, 0.0073978360742331f, 0.0083597730845213f, -0.10796478390694f, -0.15268278121948f, 0.027060620486736f, 0.015386579558253f, -0.028242662549019f, 0.083770945668221f, 0.017744954675436f, 0.066547870635986f, 0.15712094306946f, -0.095250941812992f, 0.11300181597471f, -0.013577440753579f, 0.1520971506834f, -0.046072375029325f, 0.077350422739983f, -0.23424844443798f, -0.092567473649979f, -0.16273066401482f, 0.015177961438894f, -0.12856192886829f, 0.11958949267864f, -0.11572746932507f, 0.015130575746298f, -0.0041938265785575f, 0.00806749984622f, -0.04830376803875f, -0.14730069041252f, -0.04698920249939f, 0.067692510783672f, -0.10853823274374f, 0.13420385122299f, -0.14740961790085f, 0.12399895489216f, };
		Tensor expGradInput = factory.createTensor(expGradInputData, 2, 5, 5);
		float[] expDeltaData = new float[]{0.43890875577927f, 0.4678310751915f, 0.42283910512924f, 0.76339364051819f, 1.3680002689362f, 0.65695244073868f, 0.93018901348114f, 0.51026546955109f, 0.70770889520645f, 0.54498052597046f, 0.56887125968933f, 0.47869271039963f, 0.67504066228867f, 1.3707978725433f, 0.58959740400314f, 0.35137677192688f, 1.1059188842773f, 0.30512747168541f, 1.3660243749619f, 1.0112988948822f, 1.1931555271149f, 0.66755604743958f, 2.1631102561951f, 1.5016952753067f, 0.76803404092789f, 0.40343242883682f, 1.1806337833405f, 1.2869892120361f, 1.5536687374115f, 0.87576186656952f, 0.86855810880661f, 1.1718325614929f, 1.495440363884f, 0.9388068318367f, 0.89455193281174f, 0.92318832874298f, 2.5218f, 3.3905f};
		testSpatialConvolution(noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, stride, padding, input, gradInput, expGradInput, output, gradOutput, expOutput, params, expDeltaData);
	}
	
	@Test
	public void testSpatialMaxPooling() throws Exception {
		
		SpatialMaxPooling pool = new SpatialMaxPooling(factory, 2, 2, 2, 2); 
		
		float[] inputData = new float[]{
				-1.0016336f, -0.3659996f, -0.561763f, 0.025022956f, 0.39551026f, 0.25571227f, 
				-0.36720142f, -1.1175866f, 1.6601679f, 0.7697076f, 0.94416225f, -0.33390528f, 
				-0.7185745f, -0.82316816f, -0.4198505f, 0.8720639f, -0.91903704f, 1.1918385f, 
				0.9839494f, -1.1864451f, -0.2240562f, 0.1604332f, -1.2869335f, -0.3002753f, 
				0.70621985f, 1.6712323f, 0.427771f, -1.1304947f, 1.5576284f, 0.8286627f, 
				1.1835989f, -1.261588f, 0.109402984f, 0.31725317f, 1.2378355f, 0.40925455f, 

				-0.56402963f, -1.0522915f, -0.9422165f, 1.0155184f, -0.31722248f, 1.1515416f, 
				-0.14420497f, -1.6517973f, 0.4656332f, 1.050356f, -0.5541778f, -0.21497928f, 
				-0.2700798f, 0.7216463f, 0.10998042f, -0.21850033f, 0.58419466f, 0.59096277f, 
				-1.3353262f, 1.5876176f, -0.9639381f, 0.21641004f, 2.2216365f, -0.19380932f, 
				-0.027697943f, 0.82068586f, 0.7767722f, 0.69155896f, -1.9302452f, 0.16983992f, 
				1.1714138f, -1.4150684f, -0.7196508f, 0.74438053f, 0.88626957f, -1.6724747f
		};
		
		Tensor input = factory.createTensor(inputData, 2,6,6);
		
		float[] gradOutputData = new float[]{
				-0.024800602f, 0.022750217f, 0.22541349f, 
				-0.055356164f, -0.07583931f, 0.10012579f, 
				-0.0026466453f, 0.22068158f, 0.04035959f, 

				0.14729609f, -0.039030015f, -0.017672129f, 
				-0.007538767f, 0.22331862f, -0.076386474f, 
				0.09946432f, -0.021048022f, 0.001844853f
		};
		
		Tensor gradOutput = factory.createTensor(gradOutputData, 2,3,3);
		
		final Tensor output = factory.createTensor(2,3,3);
		final Tensor gradInput = factory.createTensor(2,6,6);
		
		pool.addForwardListener(new ForwardListener() {
			@Override
			public void onForward(UUID moduleId, Tensor o, String... tags) {
				o.copyInto(output);
//				System.out.println("OUTPUT CONV "+output);
				pool.backward(UUID.randomUUID(), gradOutput);
			}
		});
		
		pool.addBackwardListener(new BackwardListener() {
			@Override
			public void onBackward(UUID moduleId, Tensor gi, String... tags) {
				gi.copyInto(gradInput);
//				System.out.println("BACKWARD CONV "+gradInput);
			}
		});
		pool.forward(UUID.randomUUID(), input);

		Thread.sleep(200);
		
		
		float[] expOutput = new float[]{-0.3659996f, 1.6601679f, 0.94416225f, 
				0.9839494f, 0.8720639f, 1.1918385f, 
				1.6712323f, 0.427771f, 1.5576284f, 

				-0.14420497f, 1.050356f, 1.1515416f, 
				1.5876176f, 0.21641004f, 2.2216365f, 
				1.1714138f, 0.7767722f, 0.88626957f};
		
		float[] expGradInput = new float[]{0.0f, -0.024800602f, 0.0f, 0.0f, 0.0f, 0.0f, 
				0.0f, 0.0f, 0.022750217f, 0.0f, 0.22541349f, 0.0f, 
				0.0f, 0.0f, 0.0f, -0.07583931f, 0.0f, 0.10012579f, 
				-0.055356164f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
				0.0f, -0.0026466453f, 0.22068158f, 0.0f, 0.04035959f, 0.0f, 
				0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 

				0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -0.017672129f, 
				0.14729609f, 0.0f, 0.0f, -0.039030015f, 0.0f, 0.0f, 
				0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 
				0.0f, -0.007538767f, 0.0f, 0.22331862f, -0.076386474f, 0.0f, 
				0.0f, 0.0f, -0.021048022f, 0.0f, 0.0f, 0.0f, 
				0.09946432f, 0.0f, 0.0f, 0.0f, 0.001844853f, 0.0f};
		
		float[] o = output.get();
		for (int i = 0; i < expOutput.length; i++) {
			Assert.assertEquals(expOutput[i], o[i], 0.001f);
		}
		
		float[] gi = gradInput.get();
		for (int i = 0; i < expGradInput.length; i++) {
			Assert.assertEquals(expGradInput[i], gi[i], 0.001f);
		}
	}
	
//	@Test
//	public void testSpatialConvolutionLena() throws Exception {
//		
//		Tensor input = converter.readFromFile("test/lena.png");
//		
//		//converter.writeToFile("test/r.png", input.select(0, 0));
//		//converter.writeToFile("test/g.png", input.select(0, 1));
//		//converter.writeToFile("test/b.png", input.select(0, 2));
//
//		int noInputPlanes = 3;
//		int noOutputPlanes = 5;
//		int kernelWidth = 3;
//		int kernelHeight = 3;
//		SpatialConvolution conv = new SpatialConvolution(factory, 
//				noInputPlanes, noOutputPlanes, kernelWidth, kernelHeight, 1, 1, false);
//		
//		for(int i=0;i<noOutputPlanes;i++){
//			Tensor sub = conv.weights.select(0, i);
//			for(int j=0;j<noInputPlanes;j++){
//				Tensor kernel = sub.select(0, j);
//				// TODO kernel for each outputplane
//				switch(i){
//				case 0:
//					kernel.fill(0.0f);
//					kernel.set(-1.0f/3.0f, 1, 0);
//					kernel.set(2.0f/3.0f, 1, 1);
//					kernel.set(-1.0f/3.0f, 1, 2);
//					break;
//				case 1:
//					kernel.fill(0.0f);
//					kernel.set(-1.0f/3.0f, 0, 1);
//					kernel.set(2.0f/3.0f, 1, 1);
//					kernel.set(-1.0f/3.0f, 2, 1);
//					break;
//				case 2:
//					kernel.fill(-1.0f/3.0f);
//					kernel.set(3.0f, 1, 1);		
//					break;
//				case 3:
//					kernel.fill(0.0f);
//					kernel.set(-1.0f/3.0f, 0, 1);
//					kernel.set(-1.0f/3.0f, 1, 0);
//					kernel.set(-1.0f/3.0f, 0, 0);
//					kernel.set(1.0f/3.0f, 2, 2);
//					kernel.set(1.0f/3.0f, 2, 1);
//					kernel.set(1.0f/3.0f, 1, 2);
//					break;					
//				case 4:
//					kernel.fill(1.0f/3.0f);
//					break;
//				}
//			}
//		}
//		
////		System.out.println(conv.getParameters());
//	
//		Object lock = new Object();
//		conv.addForwardListener(new ForwardListener() {
//			
//			@Override
//			public void onForward(Tensor output, String... tags) {
//				for(int i=0;i<noOutputPlanes;i++){
//					try {
//						//converter.writeToFile("test/output-"+i+".png", output.select(0, i));
//					} catch (Exception e) {
//						e.printStackTrace();
//					}
//				}
//				synchronized(lock){
//					lock.notifyAll();
//				}
//			}
//		});
//		long t1 = System.currentTimeMillis();
//		conv.forward(UUID.randomUUID(), input);
//		synchronized(lock){
//			lock.wait();
//		}
//		long t2 = System.currentTimeMillis();
//		System.out.println("Time "+(t2-t1)+" ms");
//	}
}
